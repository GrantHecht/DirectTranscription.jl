var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DirectTranscription","category":"page"},{"location":"#DirectTranscription","page":"Home","title":"DirectTranscription","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DirectTranscription.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DirectTranscription]","category":"page"},{"location":"#DirectTranscription.IpoptWrapper-Tuple{Function, Function, Function, Function, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}","page":"Home","title":"DirectTranscription.IpoptWrapper","text":"IpoptWrapper(feval!, geval!, gradfeval!, jacgeval!, n, x_L, x_U,\n    m, g_L, g_U, nele_jac)\n\nConstructs IpoptWrapper type. Instantiates Ipopt problem and sets \nhessian_aproximation to limited-memory as second derivates are not supported (yet).\n\n# Arguments\n- feval::Function : Objective function. In the form of feval(x) -> f(x)\n- geval!::Function : Constraint function. In the form geval!(g,x), mutates g\n- gradfeval!::Function : Evaluates gradient of objective function. In the form gradfeval!(grad,x), mutates grad \n- jacgeval!::Function : Evaluates Jacobian of constraints. In the form jacgeval(values,rows,cols,x), mutates \n                        values, rows, and cols. Values::Union{Nothing,Vector{Float64}}\n- x_L::Vector{Float64} : Lower bounds on decision variables \n- x_U::Vector{Float64} : Upper bounds on decision variables \n- g_L::Vector{Float64} : Lower bounds on constraints \n- g_U::Vector{Float64} : Upper bounds on constriants\n- nele_jac::Int : Number of non-zero elements in the Jacobian\n\n\n\n\n\n","category":"method"}]
}
